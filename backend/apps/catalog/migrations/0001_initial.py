# Generated by Django 5.0.4 on 2024-12-06 05:08

import apps.core.custom_fields.key_field
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("properties", "0001_initial"),
        ("supplier", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaxonomyItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the item was deleted",
                        null=True,
                        verbose_name="Date deleted",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the item has been deleted or not",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the item",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="The slug based on the item name",
                        max_length=255,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the item",
                        max_length=6000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="published",
                        help_text="Status of the node",
                        max_length=12,
                        verbose_name="Status",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("normal", "Normal"),
                            ("hidden", "Hidden"),
                            ("admin", "Admin"),
                        ],
                        default="normal",
                        help_text="Visibility of the node",
                        max_length=12,
                        verbose_name="Visibility",
                    ),
                ),
                (
                    "cached_properties",
                    models.JSONField(
                        blank=True,
                        help_text="Cached properties for the item",
                        null=True,
                        verbose_name="Cached properties",
                    ),
                ),
                (
                    "api_allowed",
                    models.BooleanField(
                        default=True,
                        help_text="Allow access to the item via the API",
                        verbose_name="Allow API access",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for the admin",
                        max_length=5000,
                        null=True,
                        verbose_name="Admin notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deleted by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy item",
                "verbose_name_plural": "Taxonomy items",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Taxonomy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("spacecraft", "Spacecraft"),
                            ("launch-vehicle", "Launch Vehicle"),
                            ("launch-site", "Launch Site"),
                        ],
                        help_text="Name of the taxonomy",
                        max_length=255,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="The slug based on the taxonomy name",
                        max_length=255,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "key",
                    apps.core.custom_fields.key_field.KeyField(
                        help_text="Key used for API calls",
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Key must be lowercase, cannot start with a number, and can only contain underscores.",
                                regex="^[a-z_][a-z0-9_]*$",
                            )
                        ],
                        verbose_name="Key",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the taxonomy",
                        max_length=6000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for the admin",
                        max_length=6000,
                        null=True,
                        verbose_name="Admin notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy",
                "verbose_name_plural": "Taxonomies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ItemPropertyGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the item was deleted",
                        null=True,
                        verbose_name="Date deleted",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the item has been deleted or not",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the property group",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the property instance group",
                        max_length=6000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of the property group",
                        verbose_name="Order",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deleted by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Item to assign the property group to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="property_groups",
                        to="catalog.taxonomyitem",
                        verbose_name="Item",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item property group",
                "verbose_name_plural": "Item property groups",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="LaunchVehicleItem",
            fields=[
                (
                    "taxonomyitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="catalog.taxonomyitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Launch vehicle item",
                "verbose_name_plural": "Launch vehicle items",
                "ordering": ["id"],
            },
            bases=("catalog.taxonomyitem",),
        ),
        migrations.AddField(
            model_name="taxonomyitem",
            name="taxonomy_object",
            field=models.ForeignKey(
                help_text="Taxonomy the item resides under",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="items",
                to="catalog.taxonomy",
                verbose_name="Taxonomy",
            ),
        ),
        migrations.CreateModel(
            name="TaxonomyItemFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the item was deleted",
                        null=True,
                        verbose_name="Date deleted",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the item has been deleted or not",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the file",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the file",
                        max_length=1000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deleted by",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Taxonomy item of the file",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="catalog.taxonomyitem",
                        verbose_name="Item",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy item file",
                "verbose_name_plural": "Taxonomy item files",
                "ordering": ["item", "name"],
            },
        ),
        migrations.CreateModel(
            name="TaxonomyItemFileVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the item was deleted",
                        null=True,
                        verbose_name="Date deleted",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the item has been deleted or not",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "version",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Version of the file",
                        verbose_name="Version",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the file",
                        max_length=1000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "checksum",
                    models.CharField(
                        editable=False,
                        help_text="SHA-256 checksum of the file",
                        max_length=64,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="File uploaded by a user for a taxonomy item",
                        upload_to="taxonomy/files/",
                        verbose_name="File",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deleted by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
                (
                    "taxonomy_item_file",
                    models.ForeignKey(
                        help_text="Taxonomy item file of the version",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="catalog.taxonomyitemfile",
                        verbose_name="Taxonomy item file",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy item file version",
                "verbose_name_plural": "Taxonomy item file versions",
                "ordering": ["taxonomy_item_file", "-version"],
            },
        ),
        migrations.CreateModel(
            name="TaxonomyNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the node",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="The slug based on the node name",
                        max_length=255,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "key",
                    apps.core.custom_fields.key_field.KeyField(
                        help_text="Key used for API calls",
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Key must be lowercase, cannot start with a number, and can only contain underscores.",
                                regex="^[a-z_][a-z0-9_]*$",
                            )
                        ],
                        verbose_name="Key",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the node",
                        max_length=6000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="published",
                        help_text="Status of the node",
                        max_length=12,
                        verbose_name="Status",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        help_text="Weight of the node, value between 0 and 1 with two decimals",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, message="The weight must be between 0 and 1"
                            ),
                            django.core.validators.MaxValueValidator(
                                1, message="The weight must be between 0 and 1"
                            ),
                        ],
                        verbose_name="Weight",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for the admin",
                        max_length=6000,
                        null=True,
                        verbose_name="Admin notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent node of the node",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="catalog.taxonomynode",
                        verbose_name="Parent node",
                    ),
                ),
                (
                    "taxonomy",
                    models.ForeignKey(
                        help_text="Taxonomy to assign nodes to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="catalog.taxonomy",
                        verbose_name="Taxonomy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy node",
                "verbose_name_plural": "Taxonomy nodes",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="taxonomyitem",
            name="node",
            field=models.ForeignKey(
                blank=True,
                help_text="Node the item is correlated to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="items",
                to="catalog.taxonomynode",
                verbose_name="Node",
            ),
        ),
        migrations.CreateModel(
            name="TaxonomyNodeAlternativeName",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Alternative name of the node",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the alternative name",
                        max_length=2000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for the admin",
                        max_length=2000,
                        null=True,
                        verbose_name="Admin notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        help_text="Node to assign alternative names to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alternative_names",
                        to="catalog.taxonomynode",
                        verbose_name="Node",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taxonomy node alternative name",
                "verbose_name_plural": "Taxonomy node alternative names",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SpaceVehicleItem",
            fields=[
                (
                    "taxonomyitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="catalog.taxonomyitem",
                    ),
                ),
                (
                    "is_flight_proven",
                    models.BooleanField(
                        default=False,
                        help_text="Has the item been proven to work in space?",
                        verbose_name="Is flight proven",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        help_text="Supplier of the space vehicle",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="space_vehicle_details",
                        to="supplier.supplier",
                        verbose_name="Supplier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Space vehicle item",
                "verbose_name_plural": "Space vehicle item",
                "ordering": ["id"],
            },
            bases=("catalog.taxonomyitem",),
        ),
        migrations.CreateModel(
            name="ItemProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the item",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "date_deleted",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the item was deleted",
                        null=True,
                        verbose_name="Date deleted",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the item has been deleted or not",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "integer_value",
                    models.IntegerField(
                        blank=True,
                        help_text="Integer value of the property instance",
                        null=True,
                        verbose_name="Integer value",
                    ),
                ),
                (
                    "float_value",
                    models.FloatField(
                        blank=True,
                        help_text="Float value of the property instance",
                        null=True,
                        verbose_name="Float value",
                    ),
                ),
                (
                    "string_value",
                    models.CharField(
                        blank=True,
                        help_text="String value of the property instance",
                        max_length=255,
                        null=True,
                        verbose_name="String value",
                    ),
                ),
                (
                    "custom_name",
                    models.CharField(
                        blank=True,
                        help_text="Custom name of the property instance",
                        max_length=255,
                        null=True,
                        verbose_name="Custom name",
                    ),
                ),
                (
                    "custom_key",
                    apps.core.custom_fields.key_field.KeyField(
                        blank=True,
                        help_text="Key used for API calls",
                        max_length=255,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Key must be lowercase, cannot start with a number, and can only contain underscores.",
                                regex="^[a-z_][a-z0-9_]*$",
                            )
                        ],
                        verbose_name="Custom key",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of the property instance",
                        verbose_name="Order",
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Note of the property instance",
                        max_length=4000,
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deleted by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_modified_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modified by",
                    ),
                ),
                (
                    "property_definition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Property to assign to the item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_items",
                        to="properties.property",
                        verbose_name="Property definition",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Group to assign the property instance to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="group_properties",
                        to="catalog.itempropertygroup",
                        verbose_name="Group",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Item to assign the property to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="properties",
                        to="catalog.taxonomyitem",
                        verbose_name="Item",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item property",
                "verbose_name_plural": "Item properties",
                "ordering": ["order"],
                "indexes": [
                    models.Index(
                        fields=["item", "property_definition"],
                        name="catalog_ite_item_id_ab49c9_idx",
                    ),
                    models.Index(
                        fields=["custom_key"], name="catalog_ite_custom__ac0046_idx"
                    ),
                ],
                "unique_together": {("item", "property_definition")},
            },
        ),
        migrations.AddIndex(
            model_name="taxonomy",
            index=models.Index(fields=["name"], name="catalog_tax_name_3aca87_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomy",
            index=models.Index(fields=["slug"], name="catalog_tax_slug_ec0a74_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomy",
            index=models.Index(fields=["key"], name="catalog_tax_key_9aacdb_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomyitemfileversion",
            index=models.Index(
                fields=["taxonomy_item_file"], name="catalog_tax_taxonom_21a2c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taxonomyitemfileversion",
            index=models.Index(
                fields=["version"], name="catalog_tax_version_b8c1b4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taxonomyitemfileversion",
            unique_together={("taxonomy_item_file", "version")},
        ),
        migrations.AddIndex(
            model_name="taxonomynode",
            index=models.Index(fields=["name"], name="catalog_tax_name_60be75_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomynode",
            index=models.Index(fields=["slug"], name="catalog_tax_slug_2dd01a_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomynode",
            index=models.Index(fields=["key"], name="catalog_tax_key_d10c25_idx"),
        ),
        migrations.AddConstraint(
            model_name="taxonomynode",
            constraint=models.UniqueConstraint(
                fields=("taxonomy", "slug"), name="unique_taxonomy_slug"
            ),
        ),
        migrations.AddIndex(
            model_name="taxonomyitem",
            index=models.Index(fields=["node"], name="catalog_tax_node_id_efc1de_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomyitem",
            index=models.Index(fields=["name"], name="catalog_tax_name_89b156_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomyitem",
            index=models.Index(fields=["slug"], name="catalog_tax_slug_88f04e_idx"),
        ),
        migrations.AddIndex(
            model_name="taxonomynodealternativename",
            index=models.Index(fields=["name"], name="catalog_tax_name_bfc58c_idx"),
        ),
    ]
